"""
Multi-Agent AI Proposal Drafting System (main.py)
-------------------------------------------
This application uses advanced AI agents to help users create compelling 
proposal documents for enterprise and government clients.
Run this app locally with:
    streamlit run main.py
"""

import os
import json
import tempfile
import streamlit as st
import ast
import re
from dotenv import load_dotenv
from docx import Document
from docx.shared import Pt

from src.coordinator import CoordinatorAgent
from src.agents.document_extraction import DocumentExtractionAgent

# =============================================================================
# Persistence Helper Functions
# =============================================================================

STATE_FILE = "session_state.json"

def load_state():
    """Load session state from a JSON file, excluding keys for widgets that don't allow value assignment."""
    widget_keys_to_skip = {"client_files", "your_files", "nav_go_back", "btn_nav_go_back", "nav_save_next", "btn_nav_save_next", "start_over"}
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r") as f:
                state = json.load(f)
            for key, value in state.items():
                if key in widget_keys_to_skip:
                    continue
                if key not in st.session_state:
                    st.session_state[key] = value
        except Exception as e:
            st.error(f"Error loading session state: {e}")

def save_state():
    """Save the current session state to a JSON file, skipping non-serializable values."""
    try:
        safe_state = {}
        for k, v in st.session_state.items():
            try:
                json.dumps(v)
                safe_state[k] = v
            except TypeError:
                pass
        with open(STATE_FILE, "w") as f:
            json.dump(safe_state, f)
    except Exception as e:
        st.error(f"Error saving session state: {e}")

def reset_app():
    # Preserve keys for company info and proposal_settings.
    keys_to_preserve = {"client_info", "your_info", "proposal_settings"}
    for key in list(st.session_state.keys()):
        if key not in keys_to_preserve:
            del st.session_state[key]
    if "proposal_settings" not in st.session_state:
        st.session_state["proposal_settings"] = {"type": "Government", "tone": "Formal"}
    st.session_state["current_step"] = 1  # return to step 1
    save_state()
    try:
        st.experimental_rerun()
    except Exception:
        pass

def add_markdown_content(doc, md_text):
    """Add markdown-formatted text to a docx Document."""
    lines = md_text.splitlines()
    for line in lines:
        # Check for markdown headings (e.g., ### Heading)
        header_match = re.match(r'^(#{1,6})\s+(.*)', line)
        if header_match:
            level = len(header_match.group(1))
            text = header_match.group(2)
            doc.add_heading(text, level=level)
        else:
            # Replace bold syntax (**text**) with plain text 
            line = re.sub(r'\*\*(.*?)\*\*', r'\1', line)
            para = doc.add_paragraph(line)
            if para.runs:  # Check if there's at least one run
                para.runs[0].font.size = Pt(11)

# =============================================================================
# 1. Load Environment Variables & Initialize OpenAI
# =============================================================================
load_dotenv()

# Set up the Streamlit page configuration
st.set_page_config(page_title="Multi-Agent AI Proposal Drafting System", layout="wide")
load_state()

# Retrieve OpenAI API key from .env or prompt the user
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    openai_api_key = st.text_input("Enter OpenAI API Key", type="password")
    if not openai_api_key:
        st.error("‚ùå OpenAI API Key is missing. Please enter it above.")
        st.stop()

# Initialize the coordinator and document extractor
coordinator = CoordinatorAgent(openai_api_key)
doc_extractor = DocumentExtractionAgent()

# =============================================================================
# 2. Sidebar Navigation & Reset Controls
# =============================================================================
st.sidebar.title("Proposal Navigation")
steps = [
    "1: Document Upload & Company Info",
    "2: Proposal Type & Structure",
    "3: Proposal Generation & Review",
    "4: Export & Handoff"
]

if st.sidebar.button("Start Over", key="start_over"):
    reset_app()

if "current_step" not in st.session_state:
    st.session_state["current_step"] = 1

selected_step_label = st.sidebar.radio("Go to Step", steps, index=st.session_state["current_step"] - 1)
selected_step = int(selected_step_label.split(":")[0].strip())
if selected_step != st.session_state["current_step"]:
    st.session_state["current_step"] = selected_step
    save_state()
    try:
        st.experimental_rerun()
    except AttributeError:
        pass

def next_step():
    if st.session_state["current_step"] < 5:
        st.session_state["current_step"] += 1
        save_state()

def prev_step():
    if st.session_state["current_step"] > 1:
        st.session_state["current_step"] -= 1
        save_state()
        try:
            st.experimental_rerun()
        except AttributeError:
            pass

# =============================================================================
# Section 1: Document Upload & Company Info
# =============================================================================
def section_1():
    st.title("Step 1: Document Upload & Company Info")
    col_left, col_right = st.columns(2)

    # Overall Navigation at Top Right
    nav_cols = st.columns([4, 1])
    with nav_cols[1]:
        if st.button("Save & Next"):
            st.success("Client and Company info auto-saved!")
            next_step()
            
    # Initialize sources if not present
    if "sources" not in st.session_state:
        st.session_state["sources"] = {}
            
    # LEFT PANEL: Client Company Info
    with col_left:
        st.header("Client Company Info")
        if "client_info" not in st.session_state:
            st.session_state["client_info"] = {"name": "", "description": "", "files": []}
        client = st.session_state["client_info"]
        client["name"] = st.text_input("Client Company Name", value=client.get("name", ""))
        client["description"] = st.text_area("Client Company Description", value=client.get("description", ""))
        
        uploaded_client_docs = st.file_uploader(
            "Upload Client Documents (RFP, SOW, etc.)",
            type=["pdf", "docx", "txt"],
            key="client_files",
            accept_multiple_files=True
        )
        
        client_files = []
        if uploaded_client_docs:
            st.markdown("### Uploaded Client Documents")
            for file in uploaded_client_docs:
                cols = st.columns([3, 3])
                with cols[0]:
                    st.write(file.name)
                with cols[1]:
                    # Use singular category names for consistency
                    category = st.selectbox(
                        "Category",
                        options=["RFP", "SOW", "Company Info", "Case Study", "News", "Whitepaper", "Other"],
                        key=f"client_category_{file.name}"
                    )
                text = doc_extractor.extract_text(file)
                if text:
                    client_files.append({"name": file.name, "text": text, "category": category})
                    key = "client_" + category  # aggregation key e.g., "client_RFP"
                    if key in st.session_state["sources"]:
                        st.session_state["sources"][key] += "\n" + text
                    else:
                        st.session_state["sources"][key] = text
                        
                    # Also store the combined extracted text for the agents to use
                    if "extracted_text" not in st.session_state:
                        st.session_state["extracted_text"] = text
                    else:
                        st.session_state["extracted_text"] += "\n\n" + text
            client["files"] = client_files
        st.session_state["client_info"] = client
    
    # RIGHT PANEL: Your Company Info
    with col_right:
        st.header("Your Company Info")
        if "your_info" not in st.session_state:
            st.session_state["your_info"] = {"name": "", "description": "", "files": []}
        your = st.session_state["your_info"]
        your["name"] = st.text_input("Your Company Name", value=your.get("name", ""))
        your["description"] = st.text_area("Your Company Description", value=your.get("description", ""))
        
        uploaded_your_docs = st.file_uploader(
            "Upload Your Company Documents",
            type=["pdf", "docx", "txt"],
            key="your_files",
            accept_multiple_files=True
        )
        
        your_files = []
        if uploaded_your_docs:
            st.markdown("### Uploaded Company Documents")
            for file in uploaded_your_docs:
                cols = st.columns([3, 3])
                with cols[0]:
                    st.write(file.name)
                with cols[1]:
                    category = st.selectbox(
                        "Category",
                        options=["RFP", "SOW", "Company Info", "Case Study", "News", "Whitepaper", "Other"],
                        key=f"your_category_{file.name}"
                    )
                text = doc_extractor.extract_text(file)
                if text:
                    your_files.append({"name": file.name, "text": text, "category": category})
                    key = "company_" + category  # using "company_" prefix
                    if key in st.session_state["sources"]:
                        st.session_state["sources"][key] += "\n" + text
                    else:
                        st.session_state["sources"][key] = text
            your["files"] = your_files
        st.session_state["your_info"] = your

# =============================================================================
# Section 2: Proposal Type & Structure
# =============================================================================
def section_2():
    st.title("Step 2: Proposal Type & Structure")

    # Navigation Buttons at Top Right
    nav_cols = st.columns(2)
    with nav_cols[0]:
        if st.button("Go Back", key="btn_nav_go_back"):
            prev_step()
    with nav_cols[1]:
        if st.button("Save & Next", key="btn_nav_save_next"):
            next_step()
    
    col_left, col_right = st.columns(2)

    # LEFT PANEL: Set Proposal Type & Tone + Extracted Requirements
    with col_left:
        st.header("Set Proposal Type")
        if "proposal_settings" not in st.session_state:
            st.session_state["proposal_settings"] = {"type": "Government", "tone": "Formal"}
        settings = st.session_state["proposal_settings"]
        settings["type"] = st.radio("Proposal Type",
                                    ["Government", "Commercial", "Custom"],
                                    index=["Government", "Commercial", "Custom"].index(settings.get("type", "Government")),
                                    key="sec2_proposal_type")
        settings["tone"] = st.selectbox("Proposal Tone",
                                        ["Formal", "Persuasive", "Concise", "Custom"],
                                        index=["Formal", "Persuasive", "Concise", "Custom"].index(settings.get("tone", "Formal")),
                                        key="sec2_proposal_tone")
        
        # Extract requirements from client documents
        if st.button("Extract Requirements"):
            with st.spinner("Analyzing documents to extract requirements..."):
                extracted_text = st.session_state.get("extracted_text", "")
                if extracted_text:
                    result = coordinator.process_request(
                        "analyze_industry", 
                        extracted_text=extracted_text
                    )
                    st.session_state["industry_analysis"] = result.get("industry_analysis", "")
                    
                    # Use client info for classification
                    client_info = st.session_state["client_info"].get("description", "")
                    if client_info:
                        result = coordinator.process_request(
                            "generate_technical_section",
                            client_text=client_info,
                            extracted_text=extracted_text[:100],  # Just pass a small sample for classification
                            project_requirements=""
                        )
                        st.session_state["classification"] = result.get("classification", "enterprise")
                        st.success("Requirements extracted and client classified!")
                else:
                    st.error("No documents have been uploaded. Please upload client documents in Step 1.")
                
        # Display industry analysis if available
        if "industry_analysis" in st.session_state:
            st.markdown("### Industry Analysis")
            st.write(st.session_state["industry_analysis"])
            
        # Display classification if available
        if "classification" in st.session_state:
            st.markdown("### Client Classification")
            st.write(f"Client Type: {st.session_state['classification']}")

    # RIGHT PANEL: Proposal Structure
    with col_right:
        st.header("Proposal Structure")
        default_outline = "\n\n- Executive Summary\n- Technical Approach\n- Pricing Proposal\n- Implementation Plan\n- Compliance Statements\n- Conclusion\n\n"
        outline = st.text_area("Edit or add sections in your proposal outline:",
                               value=st.session_state.get("proposal_sections", default_outline),
                               height=200,
                               key="sec2_outline")
        st.session_state["proposal_sections"] = outline
        
        # Generate Technical Solution Analysis
        if st.button("Generate Technical Solution Analysis"):
            with st.spinner("Analyzing technical requirements..."):
                extracted_text = st.session_state.get("extracted_text", "")
                client_info = st.session_state["client_info"].get("description", "")
                if extracted_text and client_info:
                    result = coordinator.process_request(
                        "generate_technical_section",
                        client_text=client_info,
                        extracted_text=extracted_text,
                        project_requirements=""
                    )
                    st.session_state["technical_solution"] = result.get("technical_solution", "")
                    st.success("Technical solution analysis complete!")
                    st.markdown("### Technical Solution Preview")
                    st.write(st.session_state["technical_solution"][:500] + "...")
                else:
                    st.error("Please provide client information and upload documents.")

# =============================================================================
# Section 3: Proposal Generation & Review
# =============================================================================
def section_3():
    st.title("Step 3: Proposal Generation & Review")
    
    nav_cols = st.columns(2)
    with nav_cols[0]:
        if st.button("Go Back", key="btn_nav_go_back_sec3"):
            prev_step()
    with nav_cols[1]:
        if st.button("Save & Next", key="btn_nav_save_next_sec3"):
            next_step()
            
    col_left, col_right = st.columns(2)
    
    # LEFT PANEL: Draft Proposal Content
    with col_left:
        st.header("Draft Proposal Content")
        
        # Get sections from the outline
        outline_text = st.session_state.get("proposal_sections", "")
        sections_list = [sec.lstrip("- ").strip() for sec in outline_text.splitlines() if sec.strip()]
        
        # Initialize current section if needed
        if "current_section" not in st.session_state:
            st.session_state["current_section"] = 0
        
        # Section navigation
        section_nav = st.columns(2)
        with section_nav[0]:
            if st.button("Previous Section"):
                if st.session_state.get("current_section", 0) > 0:
                    st.session_state["current_section"] -= 1
        with section_nav[1]:
            if st.button("Next Section"):
                if st.session_state.get("current_section", 0) < len(sections_list) - 1:
                    st.session_state["current_section"] += 1
                    
        # Section selection
        current_index = min(st.session_state.get("current_section", 0), len(sections_list)-1 if sections_list else 0)
        selected_section = st.radio("Select a section to edit:", sections_list, index=current_index) if sections_list else "No sections defined"
        if sections_list:
            st.session_state["current_section"] = sections_list.index(selected_section)
            current_section = selected_section
            
            # Initialize generated sections dictionary if needed
            if "generated_sections" not in st.session_state:
                st.session_state["generated_sections"] = {}
                
            # Section generation buttons
            generation_options = st.columns(2)
            with generation_options[0]:
                if st.button(f"Generate {current_section}"):
                    with st.spinner(f"Generating {current_section}..."):
                        extracted_text = st.session_state.get("extracted_text", "")
                        client_info = st.session_state["client_info"].get("description", "")
                        
                        # Different generation logic based on section type
                        if "Technical" in current_section:
                            result = coordinator.process_request(
                                "generate_technical_section",
                                client_text=client_info,
                                extracted_text=extracted_text,
                                project_requirements=""
                            )
                            st.session_state["generated_sections"][current_section] = result.get("technical_solution", "")
                            
                        elif "Timeline" in current_section or "Implementation" in current_section:
                            result = coordinator.process_request(
                                "generate_timeline",
                                client_text=client_info,
                                relevant_text=extracted_text,
                                additional_context="",
                            )
                            st.session_state["generated_sections"][current_section] = result.get("timeline", "")
                            
                        elif "Industry" in current_section:
                            result = coordinator.process_request(
                                "analyze_industry",
                                extracted_text=extracted_text
                            )
                            st.session_state["generated_sections"][current_section] = result.get("industry_analysis", "")
                            
                        else:
                            # Generic section generation using appropriate agent
                            # For now, we'll use the technical solution agent as a fallback
                            result = coordinator.process_request(
                                "generate_technical_section",
                                client_text=client_info,
                                extracted_text=extracted_text,
                                project_requirements=f"Generate content for: {current_section}"
                            )
                            st.session_state["generated_sections"][current_section] = result.get("technical_solution", "")
                            
            with generation_options[1]:
                if st.button("Clear Section"):
                    if current_section in st.session_state["generated_sections"]:
                        del st.session_state["generated_sections"][current_section]
                
            # Display section for editing
            if current_section in st.session_state["generated_sections"]:
                edited_draft = st.text_area("Edit Section Content:",
                                           value=st.session_state["generated_sections"][current_section],
                                           height=400,
                                           key=f"edit_{current_section}")
                st.session_state["generated_sections"][current_section] = edited_draft
            else:
                st.info(f"Click 'Generate {current_section}' to create content for this section.")
                
            # User feedback section
            st.write("User Feedback:")
            user_feedback = st.text_area("Enter your feedback to improve the section content:", value="", height=100, key="user_feedback")
            if st.button("Apply User Feedback"):
                if current_section in st.session_state["generated_sections"]:
                    with st.spinner("Applying feedback..."):
                        current_draft = st.session_state["generated_sections"][current_section]
                        result = coordinator.process_request(
                            "apply_user_feedback",
                            current_draft=current_draft,
                            user_feedback=user_feedback
                        )
                        st.session_state["generated_sections"][current_section] = result.get("revised_draft", current_draft)
                        st.success("Feedback applied successfully!")
                else:
                    st.error("Please generate section content first before applying feedback.")
        else:
            st.error("No sections defined. Please define sections in Step 2.")
    
    # RIGHT PANEL: Live Proposal Preview
    with col_right:
        st.header("Live Proposal Preview")
        if st.button("Refresh Preview"):
            pass  # Just triggers a rerun
            
        preview_container = st.empty()
        preview_content = ""
        for sec, content in st.session_state.get("generated_sections", {}).items():
            preview_content += f"## {sec}\n{content}\n\n"
            
        if not preview_content:
            preview_content = "No proposal content generated yet. Use the controls on the left to generate content for each section."
            
        preview_html = f'<div style="height:800px; overflow:auto; border:1px solid #ddd; padding:10px; white-space: pre-wrap;">{preview_content}</div>'
        st.markdown(preview_html, unsafe_allow_html=True)

# =============================================================================
# Section 4: Export & Handoff
# =============================================================================
def section_4():
    st.title("Step 4: Export & Handoff")
    
    nav_cols = st.columns([4, 1])
    with nav_cols[1]:
        if st.button("Go Back"):
            prev_step()
            
    col_left, col_right = st.columns(2)
    
    # LEFT PANEL: Export Settings & Download
    with col_left:
        st.header("Export Settings & Final Touches")
        
        cover_page = st.text_input("Cover Page Text (optional):", value=st.session_state.get("cover_page", ""))
        st.session_state["cover_page"] = cover_page
        
        metadata = st.text_area("Enter metadata (submission date, contact info, version):",
                                value=st.session_state.get("metadata", ""))
        st.session_state["metadata"] = metadata

        # Generate the final proposal document for download
        if st.button("Generate Final Document"):
            with st.spinner("Generating document..."):
                final_doc = Document()
                
                # Add cover page information
                client = st.session_state.get("client_info", {})
                your = st.session_state.get("your_info", {})
                final_doc.add_paragraph(f"Prepared for: {client.get('name', 'Client')}")
                final_doc.add_paragraph(f"Prepared by: {your.get('name', 'Your Company')}")
                
                if st.session_state.get("cover_page"):
                    final_doc.add_paragraph(st.session_state["cover_page"])
                if st.session_state.get("metadata"):
                    final_doc.add_paragraph(st.session_state["metadata"])
                
                # Add each section
                for sec, content in st.session_state.get("generated_sections", {}).items():
                    final_doc.add_heading(sec, level=2)
                    add_markdown_content(final_doc, content)
                
                # Save document to a temporary file
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
                final_doc.save(temp_file.name)
                
                st.session_state["temp_docx"] = temp_file.name
                st.success("Document generated successfully!")
        
        # Download button
        if "temp_docx" in st.session_state:
            with open(st.session_state["temp_docx"], "rb") as f:
                st.download_button(
                    "Download Final Proposal (DOCX)",
                    f,
                    file_name="Final_Proposal.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
    
    # RIGHT PANEL: Required Documents Checklist
    with col_right:
        st.header("Required Documents Checklist")
        
        # Extract requirements if we haven't already
        if "extracted_requirements" not in st.session_state and "extracted_text" in st.session_state:
            with st.spinner("Extracting requirements..."):
                # Simulate requirement extraction for the checklist
                # This would typically use an agent to extract proper requirements
                extracted_text = st.session_state["extracted_text"]
                # Generate requirements list
                if coordinator and "openai_api_key" in locals() and openai_api_key:
                    result = coordinator.process_request(
                        "generate_technical_section",
                        client_text="Extract requirements for checklist",
                        extracted_text=extracted_text[:5000],  # Limit text length
                        project_requirements="List key requirements as bullet points"
                    )
                    tech_solution = result.get("technical_solution", "")
                    # Extract bullet points
                    extracted_list = [line.strip("- ").strip() for line in tech_solution.splitlines() 
                                     if line.strip().startswith("-")]
                    if extracted_list:
                        st.session_state["extracted_requirements"] = extracted_list
                    else:
                        st.session_state["extracted_requirements"] = [
                            "Executive Summary", 
                            "Technical Approach", 
                            "Pricing Details",
                            "Implementation Timeline",
                            "Team Qualifications",
                            "References"
                        ]
        
        # Display checklist
        if "extracted_requirements" in st.session_state:
            st.write("Check off required elements that have been completed:")
            for i, req in enumerate(st.session_state["extracted_requirements"]):
                st.checkbox(req, value=False, key=f"check_{i}")
        else:
            st.info("No requirements extracted. Complete previous steps to generate the checklist.")

# =============================================================================
# Main App Dispatcher
# =============================================================================
def main():
    st.title("Multi-Agent AI Proposal Drafting System")
    current = st.session_state.get("current_step", 1)
    if current == 1:
        section_1()
    elif current == 2:
        section_2()
    elif current == 3:
        section_3()
    elif current == 4:
        section_4()
    save_state()

if __name__ == "__main__":
    main()
